{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Checkoff #1\
0: 30, 4, 16, 20\
1: 40, 3, 12, 10\
2: 50, 2, 8, 50\
3: 10, 1, 4, 40\
4: 20, 0, 0, 30\
\
Checkoff #2\
0: 10, 4, 16, 50\
1: 20, 3, 12, 40\
2: 30, 2, 8, 30\
3: 40, 1, 4, 20\
4: 50, 0, 0, 10\
\
Checkoff #3\
int min(int *array[], int size) \{\
    int i;\
    int minIndex = 0;\
    int *minValue = array[0];\
    for (i = 1; i < size; i++)\
        if (*array[i] < *minValue) \{\
            minValue = array[i];\
            minIndex = i;\
        \}\
    return minIndex;\
\}\
\
void selectionSort(int *array[], int N) \{\
    int i, j, *t;\
    int **p = array;\
    for (i = 0; i < N-1; i++) \{\
        j = min(p,N-i);\
        t = array[i];\
        array[i] = array[i+j];\
        array[i+j] = t;\
        p++;\
    \}\
\}\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Checkoff #4\
Lee Hart: 42\
Loch Narration: 32\
Ali Acorn: 64\
Bud Levile: 666\
\
Checkoff #5\
void append(struct item *oldList, struct item *newItem)\
\{\
    // Doesn't check null pointer\
    while(oldList->next)\
        oldList=oldList->next;\
    oldList->next=newItem;\
\}}